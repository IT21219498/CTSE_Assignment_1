name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build-and-test:
    name: Build and Test Services
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:5.0
        ports:
          - 27017:27017

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm install --prefix ./user-service

      - name: Skip Tests
        run: echo "No tests available. Skipping test step."

  sonarcloud-analysis:
    name: SonarCloud Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=IT21219498_CTSE_Assignment_1
            -Dsonar.organization=it21219498
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

  docker-build-and-push:
    strategy:
      matrix:
        service:
          [
            gateway,
            user-service,
            course-service,
            learner-service,
            payment-service,
            notification-service,
            frontend,
          ]
    name: Build and Push ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: sonarcloud-analysis

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Docker to use Artifact Registry
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Build and Push ${{ matrix.service }} Image
        run: |
          IMAGE=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/docker-repo/${{ matrix.service }}
          docker build -t $IMAGE ./${{ matrix.service }}
          docker push $IMAGE

  deploy:
    strategy:
      matrix:
        service:
          [
            gateway,
            user-service,
            course-service,
            learner-service,
            payment-service,
            notification-service,
            frontend,
          ]
    name: Deploy ${{ matrix.service }}
    runs-on: ubuntu-latest
    needs: docker-build-and-push

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Deploy ${{ matrix.service }}
        run: |
          SERVICE_NAME=${{ matrix.service }}
          IMAGE=us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/docker-repo/${{ matrix.service }}

          # Define environment variables for each service
          if [[ "$SERVICE_NAME" == "gateway" ]]; then
            ENV_VARS="COURSE_SERVICE_URL=https://course-service-965928461642.us-central1.run.app,USER_SERVICE_URL=https://user-service-965928461642.us-central1.run.app,LEARNING_SERVICE_URL=https://learner-service-965928461642.us-central1.run.app,PAYMENT_SERVICE_URL=https://payment-service-965928461642.us-central1.run.app,NOTIFICATION_SERVICE_URL=https://notification-service-965928461642.us-central1.run.app"
          elif [[ "$SERVICE_NAME" == "user-service" ]]; then
            ENV_VARS="JWT_SECRET=${{ secrets.JWT_SECRET }},CONNECTION_STRING=${{ secrets.CONNECTION_STRING }},GATEWAY_URL=https://gateway-965928461642.us-central1.run.app"
          elif [[ "$SERVICE_NAME" == "course-service" ]]; then
            ENV_VARS="CONNECTION_STRING=${{ secrets.CONNECTION_STRING }},CLOUDINARY_NAME=diiyul5rg,CLOUDINARY_API_KEY=811621628529636,CLOUDINARY_API_SECRET=${{ secrets.CLOUDINARY_API_SECRET }},CLOUDINARY_URL=${{ secrets.CLOUDINARY_URL }},GATEWAY_URL=https://gateway-965928461642.us-central1.run.app"
          elif [[ "$SERVICE_NAME" == "learner-service" ]]; then
            ENV_VARS="CONNECTION_STRING=${{ secrets.CONNECTION_STRING }},GATEWAY_URL=https://gateway-965928461642.us-central1.run.app"
          elif [[ "$SERVICE_NAME" == "payment-service" ]]; then
            ENV_VARS="STRIPE_KEY=${{ secrets.STRIPE_KEY }}"
          elif [[ "$SERVICE_NAME" == "notification-service" ]]; then
            ENV_VARS="USER=${{ secrets.USER }},PASSWORD=${{ secrets.PASSWORD }}"
          else
            ENV_VARS=""
          fi

          gcloud run deploy $SERVICE_NAME \
            --image $IMAGE \
            --platform managed \
            --region ${{ secrets.GCP_REGION }} \
            --allow-unauthenticated \
            --set-env-vars "$ENV_VARS"
